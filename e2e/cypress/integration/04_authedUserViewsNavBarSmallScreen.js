describe("As an authenticated user interacting with the navigation bar on a small screen", () => {
  beforeEach(() => {
    cy.intercept("GET", "/api/v1/user-sessions/current", { fixture: "user.json" }).as("loginUser")
    cy.viewport(600, 900)
    cy.visit("/?page=1")
    cy.wait("@loginUser")
  })
  it("Navigation options for authenticated users are hidden", () => {
    cy.contains("about", { matchCase: false }).should("not.be.visible")
    cy.contains("How to use", { matchCase: false }).should("not.be.visible")
    cy.contains("my builds", { matchCase: false }).should("not.be.visible")
    cy.contains("create build", { matchCase: false }).should("not.be.visible")
    cy.contains("sign out", { matchCase: false }).should("not.be.visible")
  })
  it("All navigation items for authenticated users should be visible in the burger menu", () => {
    cy.get('[data-cy="nav-bar-burger-menu-authed"]')
      .should("be.visible")
      .then(($menu) => {
        cy.wrap($menu).click()
        cy.get("#menu-appbar").as("burger-menu-items")
        cy.get("@burger-menu-items").contains("about", { matchCase: false }).should("be.visible")
        cy.get("@burger-menu-items")
          .contains("how to use", { matchCase: false })
          .should("be.visible")
        cy.get("@burger-menu-items")
          .contains("my builds", { matchCase: false })
          .should("be.visible")
        cy.get("@burger-menu-items")
          .contains("create build", { matchCase: false })
          .should("be.visible")
        cy.get("@burger-menu-items").contains("sign out", { matchCase: false }).should("be.visible")
      })
  })
  it("No navigation items for unauthenticated users should exist in the burger menu", () => {
    cy.get('[data-cy="nav-bar-burger-menu-authed"]')
      .should("be.visible")
      .then(($menu) => {
        cy.wrap($menu).click()
        cy.get("#menu-appbar").as("burger-menu-items")
        cy.get("@burger-menu-items")
          .contains("sign in", { matchCase: false })
          .should("not.exist")
        cy.get("@burger-menu-items")
          .contains("sign up", { matchCase: false })
          .should("not.exist")
        cy.get("@burger-menu-items").contains("login with github", { matchCase: false }).should("not.exist")
      })
  })
  after(()=> {
    cy.intercept("DELETE", "/api/v1/user-sessions/")
  })
})
